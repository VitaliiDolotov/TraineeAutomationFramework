// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PlaywrightAutomation.SpecFlowTests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("UserManagement")]
    public partial class UserManagementFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "UserManagement.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "SpecFlowTests", "UserManagement", "Test cases related to the User management functionality", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
 testRunner.Given("User is on Automation trainee website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.Then("\'Users and Addresses\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckThatNewUserCanBeCreated")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        public void CheckThatNewUserCanBeCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckThatNewUserCanBeCreated", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 11
 testRunner.When("User navigates to \'Add User\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
 testRunner.When("User enters \'Oleg\' text to \'User Name\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.When("User enters \'1989\' text to \'Year of Birth\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
 testRunner.When("User clicks \'Create\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
 testRunner.Then("\'Users and Addresses\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table1.AddRow(new string[] {
                            "User Name",
                            "Oleg"});
                table1.AddRow(new string[] {
                            "Year of Birth",
                            "1989"});
                table1.AddRow(new string[] {
                            "Gender",
                            "Undefined"});
#line 16
 testRunner.Then("row with following data is displayed in \'Users\' table", ((string)(null)), table1, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table2.AddRow(new string[] {
                            "User Name",
                            "Oleg"});
                table2.AddRow(new string[] {
                            "Year of Birth",
                            "1989"});
                table2.AddRow(new string[] {
                            "Gender",
                            "Undefined"});
#line 22
 testRunner.When("User clicks \'Delete\' button in \'Users\' table for row with data", ((string)(null)), table2, "When ");
#line hidden
#line 27
 testRunner.When("User clicks \'Yes\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckThatNewAddressCanBeAdded")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("address")]
        public void CheckThatNewAddressCanBeAdded()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression",
                    "address"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckThatNewAddressCanBeAdded", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 31
 testRunner.When("User navigates to \'Add Address\' page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.When("User enters \'446 Noah Ct\' text to \'Street Address\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.When("User enters \'Westminster\' text to \'City\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.When("User enters \'MD\' text to \'State\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 35
 testRunner.When("User enters \'21157\' text to \'Zip Code\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.When("User clicks \'Create\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("\'Users and Addresses\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table3.AddRow(new string[] {
                            "Street Address",
                            "446 Noah Ct"});
                table3.AddRow(new string[] {
                            "City",
                            "Westminster"});
                table3.AddRow(new string[] {
                            "State",
                            "MD"});
                table3.AddRow(new string[] {
                            "Zip Code",
                            "21157"});
#line 38
 testRunner.Then("row with following data is displayed in \'Addresses\' table", ((string)(null)), table3, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table4.AddRow(new string[] {
                            "Street Address",
                            "446 Noah Ct"});
                table4.AddRow(new string[] {
                            "City",
                            "Westminster"});
                table4.AddRow(new string[] {
                            "State",
                            "MD"});
                table4.AddRow(new string[] {
                            "Zip Code",
                            "21157"});
#line 45
 testRunner.When("User clicks \'Delete\' button in \'Addresses\' table for row with data", ((string)(null)), table4, "When ");
#line hidden
#line 51
    testRunner.When("User clicks \'Yes\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CheckThatUserCanBeEdited")]
        [NUnit.Framework.CategoryAttribute("Regression")]
        [NUnit.Framework.CategoryAttribute("Edition")]
        public void CheckThatUserCanBeEdited()
        {
            string[] tagsOfScenario = new string[] {
                    "Regression",
                    "Edition"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CheckThatUserCanBeEdited", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table5.AddRow(new string[] {
                            "User Name",
                            "Oleg"});
                table5.AddRow(new string[] {
                            "Year of Birth",
                            "1993"});
                table5.AddRow(new string[] {
                            "Gender",
                            "Male"});
#line 55
    testRunner.When("User clicks \'Edit\' button in \'Users\' table for row with data", ((string)(null)), table5, "When ");
#line hidden
#line 60
    testRunner.Then("\'Edit User\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.When("User enters \'Ivan\' text to \'User Name\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.When("User enters \'1999\' text to \'Year of Birth\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.When("User clicks \'Update\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("\'Users and Addresses\' page is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table6.AddRow(new string[] {
                            "User Name",
                            "Ivan"});
                table6.AddRow(new string[] {
                            "Year of Birth",
                            "1999"});
                table6.AddRow(new string[] {
                            "Gender",
                            "Male"});
#line 65
 testRunner.Then("row with following data is displayed in \'Users\' table", ((string)(null)), table6, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Column",
                            "Data"});
                table7.AddRow(new string[] {
                            "User Name",
                            "Ivan"});
                table7.AddRow(new string[] {
                            "Year of Birth",
                            "1999"});
                table7.AddRow(new string[] {
                            "Gender",
                            "Male"});
#line 71
 testRunner.When("User clicks \'Edit\' button in \'Users\' table for row with data", ((string)(null)), table7, "When ");
#line hidden
#line 76
 testRunner.When("User enters \'Oleg\' text to \'User Name\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.When("User enters \'1993\' text to \'Year of Birth\' input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 78
 testRunner.When("User clicks \'Update\' button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
